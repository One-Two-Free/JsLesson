	/*Стили элемента: свойство style
Свойство element.style возвращает объект, который дает доступ к стилю элемента на чтение и запись.
С его помощью можно изменять большинство CSS-свойств, например element.style.width="100px" 
работает так, как будто у элемента в атрибуте прописано style="width:100px".

Единицы измерения обязательны в style
Об этом иногда забывают, но в style так же, как и в CSS, нужно указывать единицы измерения, например px.
Ни в коем случае не просто elem.style.width = 100 – работать не будет.

Для свойств, названия которых состоят из нескольких слов, используется вотТакаяЗапись:
background-color  => elem.style.backgroundColor
z-index           => elem.style.zIndex
border-left-width => elem.style.borderLeftWidth
style.cssFloat вместо style.float*/

/*Свойства с префиксами
Специфические свойства браузеров, типа -moz-border-radius, -webkit-border-radius, 
записываются следующим способом: То есть, каждый дефис даёт большую букву.*/
button.style.MozBorderRadius = '5px';
button.style.WebkitBorderRadius = '5px';

/*Чтобы сбросить поставленный стиль, присваивают в style пустую строку: elem.style.width="".
При сбросе свойства style стиль будет взят из CSS.
Например, для того, чтобы спрятать элемент, можно присвоить: elem.style.display = "none".
А вот чтобы показать его обратно – не обязательно явно указывать другой display, 
наподобие elem.style.display = "block". Можно просто снять поставленный стиль: elem.style.display = "".*/


/*Стиль в style находится в формате браузера, а не в том, в котором его присвоили.*/
<script>
    document.body.style.margin = '20px';
    alert( document.body.style.marginTop ); // 20px!

    document.body.style.color = '#abc';
    alert( document.body.style.color ); // rgb(170, 187, 204)
  </script>

/*Свойство style мы используем лишь там, где не работают классы
В большинстве случаев внешний вид элементов задаётся классами. А JavaScript добавляет или удаляет их. Такой код красив и гибок, дизайн можно легко изменять.
Свойство style нужно использовать лишь там, где классы не подходят, например если точное значение цвета/отступа/высоты вычисляется в JavaScript.*/
  
/*Свойство style.cssText позволяет поставить стиль целиком в виде строки.
При установке style.cssText все предыдущие свойства style удаляются.*/
div.style.cssText="color: red !important; \
    background-color: yellow; \
    width: 100px; \
    text-align: center; \
    blabla: 5; \
  ";
/*Свойство style содержит лишь тот стиль, который указан в атрибуте элемента, без учёта каскада CSS.*/

/*Полный стиль из getComputedStyle
Итак, свойство style дает доступ только к той информации, которая хранится в elem.style.
Он не скажет ничего об отступе, если он появился в результате наложения CSS или встроенных стилей браузера:
А если мы хотим, например, сделать анимацию и плавно увеличивать marginTop от текущего значения?
Как нам сделать это? Ведь для начала нам надо это текущее значение получить.

Для того, чтобы получить текущее используемое значение свойства, 
используется метод window.getComputedStyle, описанный в стандарте DOM Level 2.

Его синтаксис таков:
getComputedStyle(element[, pseudo])
element  Элемент, значения для которого нужно получить
pseudo   Указывается, если нужен стиль псевдо-элемента, например "::before". Пустая строка или отсутствие аргумента означают сам элемент.

Поддерживается всеми браузерами, кроме IE8-. Следующий код будет работать во всех не-IE браузерах и в IE9+:*/
<style>  body {    margin: 10px  }</style>
<body><script>
    var computedStyle = getComputedStyle(document.body);
    alert( computedStyle.marginTop ); // выведет отступ в пикселях
    alert( computedStyle.color ); // выведет цвет
  </script></body>

/*Вычисленное (computed) и окончательное (resolved) значения
В CSS есть две концепции:
	Вычисленное (computed) значение – это то, которое получено после применения всех правил CSS и CSS-наследования. Например, width: auto или font-size: 125%.
	Окончательное (resolved) значение – непосредственно применяемое к элементу. 
	При этом все размеры приводятся к пикселям, например width: 212px или font-size: 16px. 
	В некоторых браузерах пиксели могут быть дробными.
Когда-то getComputedStyle задумывалось для возврата вычисленного значения, но со временем оказалось, что окончательное гораздо удобнее.
Поэтому сейчас в целом все значения возвращаются именно окончательные, кроме некоторых небольших глюков в браузерах, которые постепенно вычищаются.*/
  
/*getComputedStyle требует полное свойство!
Для правильного получения значения нужно указать точное свойство. 
Например: paddingLeft, marginTop, borderLeftWidth.

При обращении к сокращенному: padding, margin, border – правильный результат не гарантируется.

Действительно, допустим свойства paddingLeft/paddingTop взяты из разных классов CSS. 
Браузер не обязан объединять их в одно свойство padding. Иногда, в простейших случаях, 
когда свойство задано сразу целиком, getComputedStyle сработает для сокращённого свойства, 
но не во всех браузерах.*/
  
/*Стили посещенных ссылок – тайна!
У посещенных ссылок может быть другой цвет, фон, чем у обычных.
Это можно поставить в CSS с помощью псевдокласса :visited.

Но getComputedStyle не дает доступ к этой информации, 
чтобы произвольная страница не могла определить, посещал ли пользователь ту или иную ссылку.

Кроме того, большинство браузеров запрещают применять к :visited CSS-стили, 
которые могут изменить геометрию элемента, чтобы даже окольным путем 
нельзя было это понять. В целях безопасности.*/  
  
/*Итого
Все DOM-элементы предоставляют следующие свойства.

Свойство style – это объект, в котором CSS-свойства пишутся вотТакВот. 
Чтение и изменение его свойств – это, по сути, работа с компонентами атрибута style.

style.cssText – строка стилей для чтения или записи. Аналог полного атрибута style.

Свойство currentStyle(IE8-) и метод getComputedStyle (IE9+, стандарт) позволяют 
получить реальное, применённое сейчас к элементу свойство стиля с учётом CSS-каскада 
и браузерных стилей по умолчанию.

При этом currentStyle возвращает значение из CSS, до окончательных вычислений, 
а getComputedStyle – окончательное, непосредственно применённое к элементу (как правило).*/
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  