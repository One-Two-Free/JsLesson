/*Координаты в документе
Система координат относительно страницы или, иначе говоря, 
относительно документа, начинается в левом-верхнем углу, но не окна, а именно страницы.
И координаты в ней означают позицию по отношению не к окну браузера, а к документу в целом.
Если провести аналогию с CSS, то координаты относительно окна – это position:fixed, 
а относительно документа – position:absolute (при позиционировании вне других элементов, естественно).
Мы будем называть координаты в ней pageX/pageY.
Они нужны в первую очередь для того, чтобы показывать элемент в определённом месте страницы, а не окна.

	Сравнение систем координат
Когда страница не прокручена, точки начала координат относительно окна (clientX,clientY) и документа (pageX,pageY) совпадают:см.рис
Итак, координаты pageX/pageY не меняются при прокрутке, в отличие от clientX/clientY.*/

	/*Получение координат
К сожалению, готовой функции для получения координат элемента относительно страницы нет. 
Но её можно легко написать самим.
Эти две системы координат жёстко связаны: pageY = clientY + текущая вертикальная прокрутка.
Наша функция getCoords(elem) будет брать результат elem.getBoundingClientRect() и прибавлять текущую прокрутку документа.
Результат getCoords: объект с координатами {left: .., top: ..}*/
function getCoords(elem) { // кроме IE8-
  var box = elem.getBoundingClientRect();
  return {
    top: box.top + pageYOffset,
    left: box.left + pageXOffset
  };
}

//Если нужно поддерживать более старые IE, то вот альтернативный, самый кросс-браузерный вариант:
function getCoords(elem) {
  // (1)
  var box = elem.getBoundingClientRect();
  var body = document.body;
  var docEl = document.documentElement;
  // (2)
  var scrollTop = window.pageYOffset || docEl.scrollTop || body.scrollTop;
  var scrollLeft = window.pageXOffset || docEl.scrollLeft || body.scrollLeft;
  // (3)
  var clientTop = docEl.clientTop || body.clientTop || 0;
  var clientLeft = docEl.clientLeft || body.clientLeft || 0;
  // (4)
  var top = box.top + scrollTop - clientTop;
  var left = box.left + scrollLeft - clientLeft;
  return {
    top: top,
    left: left
  };
}
/*Разберем что и зачем, по шагам:
	Получаем прямоугольник.
	Считаем прокрутку страницы. Все браузеры, кроме IE8- поддерживают свойство pageXOffset/pageYOffset. В более старых IE, когда установлен DOCTYPE, прокрутку можно получить из documentElement, ну и наконец если DOCTYPE некорректен – использовать body.
	В IE документ может быть смещен относительно левого верхнего угла. Получим это смещение.
	Добавим прокрутку к координатам окна и вычтем смещение html/body, чтобы получить координаты нужного нам элемента.*/


/*Координаты на экране screenX/screenY
Есть ещё одна система координат, которая используется очень редко, 
но для полноты картины необходимо её упомянуть.
Координаты относительно экрана screenX/screenY отсчитываются от его левого-верхнего угла. 
Имеется в виду именно весь экран, а не окно браузера.
Такие координаты могут быть полезны, например, при работе с мобильными устройствами
 или для открытия нового окна посередине экрана вызовом window.open.*/

/*Размеры экрана хранятся в глобальной переменной screen:*/
// общая ширина/высота
alert( screen.width + ' x ' + screen.height );
// доступная ширина/высота (за вычетом таскбара и т.п.)
alert( screen.availWidth + ' x ' + screen.availHeight );
// есть и ряд других свойств screen (см. документацию)
/*Координаты левого-верхнего угла браузера на экране хранятся в window.screenX, window.screenY (не поддерживаются IE8-):*/
alert( "Браузер находится на " + window.screenX + "," + window.screenY );

/*Итого
У любой точки в браузере есть координаты:
	Относительно окна window – elem.getBoundingClientRect().
	Относительно документа document – добавляем прокрутку, во всех фреймворках есть готовая функция.
	Относительно экрана screen – можно узнать координаты браузера, но не элемента.
	
Иногда в старом коде можно встретить использование offsetTop/Left для подсчёта координат. Это очень старый и неправильный способ, не стоит его использовать.

Координаты будут нужны нам далее, при работе с событиями мыши (координаты клика) и элементами (перемещение).*/







