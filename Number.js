/*Все числа в JavaScript, как целые так и дробные, имеют тип Number и хранятся в 64-битном формате IEEE-754, также известном как «double precision».*/

alert( 0xFF ); // 255 в шестнадцатиричной системе
alert( 3e5 ); // пример научной формы: 3 с 5 нулями
alert( 3e-5 ); // 0.00003  <-- 5 нулей, включая начальный ноль
alert( 1 / 0 ); // Infinity
alert( 12345 / 0 ); // Infinity

/*
Infinity – особенное численное значение, которое ведет себя в точности как математическая бесконечность ∞.
Infinity больше любого числа. Добавление к бесконечности не меняет её.*/

/*
Если математическая операция не может быть совершена, то возвращается специальное значение NaN (Not-A-Number).
Значение NaN – единственное в своем роде, которое не равно ничему, включая себя.*/
/*
Значение NaN можно проверить специальной функцией isNaN(n), которая преобразует аргумент к числу и 
возвращает true, если получилось NaN, и false – для любого другого значения.*/
var n = 0 / 0;
alert( isNaN(n) ); // true
alert( isNaN("12") ); // false, строка преобразовалась к обычному числу 12
/*
Значение NaN «прилипчиво». Любая операция с NaN возвращает NaN.
Если аргумент isNaN – не число, то он автоматически преобразуется к числу.
*/

/*
Функция isFinite(n) преобразует аргумент к числу и возвращает true, если это не NaN/Infinity/-Infinity:*/
alert( isFinite(1) ); // true
alert( isFinite(Infinity) ); // false
alert( isFinite(NaN) ); // false

/*
Преобразование к числу
чтобы сделать это явно, обычно перед значением ставят унарный плюс '+'
*/
var s = "12.34";
alert( +s ); // 12.34
//При этом, если строка не является в точности числом, то результат будет NaN:
alert( +"12test" ); // NaN
//Единственное исключение – пробельные символы в начале и в конце строки, которые игнорируются:
alert( +"  -12" ); // -12
alert( +" \n34  \n" ); // 34, перевод строки \n является пробельным символом
alert( +"" ); // 0, пустая строка становится нулем
alert( +"1 2" ); // NaN, пробел посередине числа - ошибка

//Аналогичным образом происходит преобразование и в других математических операторах и функциях:
alert( '12.34' / "-2" ); // -6.17

/*
Функция parseInt и ее аналог parseFloat преобразуют строку символ за символом, пока это возможно.
При возникновении ошибки возвращается число, которое получилось. 
Функция parseInt читает из строки целое число, а parseFloat – дробное.
Функция parseInt также позволяет указать систему счисления, то есть считывать числа, 
заданные в шестнадцатиричной и других системах счисления:*/
alert( parseInt('12px') ) // 12, ошибка на символе 'p'
alert( parseFloat('12.3.4') ) // 12.3, ошибка на второй точке
alert( parseInt('FF', 16) ); // 255

/*
Проверка на число
Для проверки строки на число можно использовать функцию isNaN(str).
Она преобразует строку в число аналогично +, а затем вернёт true, если это NaN, 
то есть если преобразование не удалось:*/

/*
Если же нужна действительно точная проверка на число, которая не считает числом строку из пробелов, 
логические и специальные значения, а также отсекает Infinity – используйте следующую функцию isNumeric:
*/
function isNumeric(n) {
  return !isNaN(parseFloat(n)) && isFinite(n);
}
/*
Разберёмся, как она работает. Начнём справа.

Функция isFinite(n) преобразует аргумент к числу и возвращает true, если это не Infinity/-Infinity/NaN.

Таким образом, правая часть отсеет заведомо не-числа, но оставит такие значения как true/false/null и пустую строку '', так как они корректно преобразуются в числа.

Для их проверки нужна левая часть. Вызов parseFloat(true/false/null/'') вернёт NaN для этих значений.

Так устроена функция parseFloat: она преобразует аргумент к строке, то есть true/false/null становятся "true"/"false"/"null", а затем считывает из неё число, при этом пустая строка даёт NaN.*/


/*toString(система счисления)
Основание может быть любым от 2 до 36.
Основание 2 бывает полезно для отладки побитовых операций:*/
var n = 4;
alert( n.toString(2) ); // 100

/*
Основание 36 (по количеству букв в английском алфавите – 26, вместе с цифрами, которых 10) используется для того, чтобы «кодировать» число в виде буквенно-цифровой строки. В этой системе счисления сначала используются цифры, а затем буквы от a до z:
При помощи такого кодирования можно «укоротить» длинный цифровой идентификатор, например чтобы выдать его в качестве URL.*/
var n = 1234567890;
alert( n.toString(36) ); // kf12oi

/*
Округление
Math.floor  Округляет вниз
Math.ceil  Округляет вверх
Math.round  Округляет до ближайшего целого
*/
alert( Math.floor(3.1) );  // 3
alert( Math.ceil(3.1) );   // 4
alert( Math.round(3.1) );  // 3

/*
Округление до заданной точности
Для округления до нужной цифры после запятой можно умножить и поделить на 10 с нужным количеством нулей. Например, округлим 3.456 до 2-го знака после запятой:*/
var n = 3.456;
alert( Math.round(n * 100) / 100 ); // 3.456 -> 345.6 -> 346 -> 3.46

/*
num.toFixed(precision)
Существует также специальный метод num.toFixed(precision), который округляет число num до точности precision и возвращает результат в виде строки
Округление идёт до ближайшего значения, аналогично Math.round:*/
var n = 12.36;
alert( n.toFixed(1) ); // "12.4"
//Если нам нужно именно число, то мы можем получить его, применив '+' к результату n.toFixed(..):
var n = 12.34;
alert( +n.toFixed(5) ); // 12.34


/*Другие математические методы
JavaScript предоставляет базовые тригонометрические и некоторые другие функции для работы с числами.

Тригонометрия
Встроенные функции для тригонометрических вычислений:

Math.acos(x)
Возвращает арккосинус x (в радианах)
Math.asin(x)
Возвращает арксинус x (в радианах)
Math.atan(x)
Возвращает арктангенс x (в радианах)
Math.atan2(y, x)
Возвращает угол до точки (y, x). Описание функции: Atan2.
Math.sin(x)
Вычисляет синус x
Math.cos(x)
Вычисляет косинус x
Math.tan(x)
Возвращает тангенс x
Функции общего назначения
Разные полезные функции:

Math.sqrt(x)
Возвращает квадратный корень из x.
Math.log(x)
Возвращает натуральный (по основанию e) логарифм x.
Math.pow(x, exp)
Возводит число в степень, возвращает xexp, например Math.pow(2,3) = 8. 
Работает в том числе с дробными и отрицательными степенями, например: Math.pow(4, -1/2) = 0.5.
Math.abs(x)
Возвращает абсолютное значение числа
Math.exp(x)
Возвращает ex, где e – основание натуральных логарифмов.
Math.max(a, b, c...)
Возвращает наибольший из списка аргументов
Math.min(a, b, c...)
Возвращает наименьший из списка аргументов
Math.random()
Возвращает псевдослучайное число в интервале [0,1) – то есть между 0 (включительно) и 1 (не включая). Генератор случайных чисел инициализуется текущим временем.*/

/*Итого
Числа могут быть записаны в десятеричной, шестнадцатиричной системах, а также «научным» способом.
В JavaScript существует числовое значение бесконечность Infinity.
Ошибка вычислений дает NaN.
Арифметические и математические функции преобразуют строку в точности в число, игнорируя начальные и конечные пробелы.
Функции parseInt/parseFloat делают числа из строк, которые начинаются с числа.
Есть четыре способа округления: Math.floor, Math.round, Math.ceil и битовый оператор. Для округления до нужного знака используйте +n.toFixed(p) или трюк с умножением и делением на 10p.
Дробные числа дают ошибку вычислений. При необходимости ее можно отсечь округлением до нужного знака.
Случайные числа от 0 до 1 генерируются с помощью Math.random(), остальные – преобразованием из них.*/




