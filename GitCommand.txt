git init
git status
git add
git commit -m "Description"
git log Просмотр истории коммитов
	-p, который показывает дельту (разницу/diff), привнесенную каждым коммитом. 
	Вы также можете использовать -2, что ограничит вывод до 2-х последних записей:
	git log -p -2

git remote add NAME "PATH" сылка на удаленный репозиторий

git remote
git remote -v  посмотреть связи
git remote show NAME

git fetch NAME получить инфу из удаленного репозитория которой еще нет в локальном,
		например ссылки на ветки, которых у нас еще нет. Внимание! 
		Команда git fetch никак не изменяет наши файлы!

git checkout --track REMOTENAME/master 	связать нашу ветку master и ветку master удаленного
					репозитория




Работа с гитхаб

1 	Создаем репозиторий. При создании просим сразу создать в нём файл
	README (это упростит нам дальнейшую работу)
2	Запоминаем адрес нашего репозитория (clone URL)
3	Клонируем этот репозиторий к себе на компьютер:
	git clone CLONE_URL PROJECT_FOLDER
В результате мы получаем у себя репозиторий, являющийся точной копией
удалённого репозитория. Более того – они связаны невидимой связью и мы этим
воспользуемся!

git pull  не просто «достаёт» изменения, но и пытается применить изменения с
	  удаленного репозитория к нашему (влить удаленную ветку в локальную)
git push  отправляет наши наборы изменений на удалённый репозиторий


git branch testing  	создается новая ветка testing
git branch -v 		какие ветки существуют
git checkout testing	Эта команда передвинет HEAD на ветку testing
git checkout -b testing создает и перемещает на ветку testing

git checkout master
git merge testing  	слияние двух веток (когда ветки master и testing на одной линии)
			возьми все изменения из ветки hotfix которых в master нету
			и попытайтесь к master применить
			Что вливаем стоит в команде merge, куда вливаем должна быть текущая ветка

git branch -d hotfix	удалить ветку hotfix

Esc :w			записать изменения
Esc :q			выход из редактора	



Решаем конфликты

git status	покажет файлы с конфликтами
		В них вы найдете метки у конфликтых мест

Чтобы «решить конфликт», вы должны оставить нужный вам 
вариант или переписать проблемное место заново

Затем не забудьте git add ...
конфликтного файла – проиндексировать его


И потом, когда все конфликты решены, git commit ...

Решение конфликтов – это та часть «Дао Git», в которой я рекомендую пользоваться
графическими инструментами. Меньше возможности ошибиться!





ТЕГИ – это метки, которыми можно пометить коммит.

git tag 1.0		Эта команда помечает текущий коммит легкой меткой 1.0
git tag			выведет список всех меток в вашем репозитории
git tag -l '1.*'	Список меток по маске
git show 1.0		Просмотр информации о заданной метке
git tag -d 1.0		Удаление метки




