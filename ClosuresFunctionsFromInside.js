/*Лексическое окружение
Все переменные внутри функции – это свойства специального
внутреннего объекта LexicalEnvironment, который создаётся при её запуске.

При запуске функция создает объект LexicalEnvironment, записывает туда аргументы, 
функции и переменные. Процесс инициализации выполняется в том же порядке, 
что и для глобального объекта, который, вообще говоря, является частным случаем лексического окружения.

В отличие от window, объект LexicalEnvironment является внутренним, он скрыт от прямого доступа.
Интерпретатор, при доступе к переменной, сначала пытается найти переменную
в текущем LexicalEnvironment, а затем, если её нет – ищет во внешнем объекте переменных.

Такой порядок поиска возможен благодаря тому, что ссылка на внешний объект
переменных хранится в специальном внутреннем свойстве функции, которое называется [[Scope]].
Это свойство закрыто от прямого доступа, но знание о нём очень важно для понимания того, как работает JavaScript.

При создании функция получает скрытое свойство [[Scope]],
которое ссылается на лексическое окружение, в котором она была создана.

Это свойство никогда не меняется. Оно всюду следует за функцией,
привязывая её, таким образом, к месту своего рождения.

При запуске функции её объект переменных LexicalEnvironment
получает ссылку на «внешнее лексическое окружение» со значением из [[Scope]].

Если переменная не найдена в функции – она будет искаться снаружи.

Если обобщить:
	
	Каждая функция при создании получает ссылку [[Scope]] на объект с переменными, 
	в контексте которого была создана.
	
	При запуске функции создаётся новый объект с переменными LexicalEnvironment. 
	Он получает ссылку на внешний объект переменных из [[Scope]].
	
	При поиске переменных он осуществляется сначала в текущем объекте переменных, 
	а потом – по этой ссылке.

	
	
	Всегда текущее значение
Значение переменной из внешней области берётся всегда текущее. 
Оно может быть уже не то, что было на момент создания функции.

Для доступа к внешней переменной функция по ссылке [[Scope]] 
обращается во внешний объект переменных и берёт то значение, 
которое там есть на момент обращения.

Заметим, что если переменная не найдена во внешнем объекте переменных, 
то она ищется в ещё более внешнем (через [[Scope]] внешней функции)

	Итого: замыкания
Замыкание – это функция вместе со всеми внешними переменными, которые ей доступны.
Таково стандартное определение, которое есть в Wikipedia и большинстве серьёзных источников по программированию. 
То есть, замыкание – это функция + внешние переменные.
Тем не менее, в JavaScript есть небольшая терминологическая особенность.
Обычно, говоря «замыкание функции», подразумевают не саму эту функцию, а именно внешние переменные.
Иногда говорят «переменная берётся из замыкания». Это означает – из внешнего объекта переменных.

	«Понимать замыкания» в JavaScript означает понимать следующие вещи:
Все переменные и параметры функций являются свойствами объекта переменных LexicalEnvironment. Каждый запуск функции создает новый такой объект. На верхнем уровне им является «глобальный объект», в браузере – window.
При создании функция получает системное свойство [[Scope]], которое ссылается на LexicalEnvironment, в котором она была создана.
При вызове функции, куда бы её ни передали в коде – она будет искать переменные сначала у себя, а затем во внешних LexicalEnvironment с места своего «рождения».
*/
	