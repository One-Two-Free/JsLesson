/*Фокусировка: focus/blur
Говорят, что элемент «получает фокус», когда посетитель фокусируется на нём. Обычно фокусировка
автоматически происходит при нажатии на элементе мышкой, но также можно перейти на нужный элемент 
клавиатурой – через клавишу Tab, нажатие пальцем на планшете и так далее.
Момент получения фокуса и потери очень важен.
При получении фокуса мы можем подгрузить данные для автодополнения, начать отслеживать изменения. 
При потере – проверить данные, которые ввёл посетитель.

Кроме того, иногда полезно «вручную», из JavaScript перевести фокус на нужный элемент, 
например, на поле в динамически созданной форме.*/


/*События focus/blur
Событие focus вызывается тогда, когда пользователь фокусируется на элементе,
а blur – когда фокус исчезает, например посетитель кликает на другом месте экрана.

В примере ниже:
	Обработчик onblur проверяет, что в поле введено число, если нет – показывает ошибку.
	Обработчик onfocus, если текущее состояние поля ввода – «ошибка» – скрывает её (потом при onblur будет повторная проверка).*/
<style> .error { border-color: red; } </style>
Введите ваш возраст: <input type="text" id="input">
<div id="error"></div>
<script>
input.onblur = function() {
  if (isNaN(this.value)) { // введено не число
    // показать ошибку
    this.className = "error";
    error.innerHTML = 'Вы ввели не число. Исправьте, пожалуйста.'
  }
};
input.onfocus = function() {
  if (this.className == 'error') { // сбросить состояние "ошибка", если оно есть
    this.className = "";
    error.innerHTML = "";
  }
};
</script>


/*Методы focus/blur
Методы с теми же названиями переводят/уводят фокус с элемента.*/
<style>  .error {    background: red;  }</style>

<div>Возраст:  <input type="text" id="age"></div>
<div>Имя:  <input type="text"></div>
<script>
  age.onblur = function() {
    if (isNaN(this.value)) { // введено не число
      // показать ошибку
      this.classList.add("error");
      //... и вернуть фокус обратно
      age.focus();
    } else {      this.classList.remove("error");    }
  };
</script>

/*Этот пример работает во всех браузерах, кроме Firefox
Если ввести что-то нецифровое в поле «возраст», и потом попытаться табом или мышкой перейти на другой <input>, то обработчик onblur вернёт фокус обратно.
Обратим внимание – если из onblur сделать event.preventDefault(), то такого же эффекта не будет, потому что onblur срабатывает уже после того, как элемент потерял фокус.*/


/*Разрешаем фокус на любом элементе: tabindex
По умолчанию не все элементы поддерживают фокусировку.

Перечень элементов немного рознится от браузера к браузеру, например, список для IE описан в MSDN, 
одно лишь верно всегда – заведомо поддерживают focus/blur те элементы, c которыми посетитель 
может взаимодействовать: <button>, <input>, <select>, <a> и т.д.

С другой стороны, на элементах для форматирования, таких как <div>, <span>, <table> – по умолчанию
сфокусироваться нельзя. Впрочем, существует способ включить фокусировку и для них.

В HTML есть атрибут tabindex.
Его основной смысл – это указать номер элемента при переборе клавишей Tab.
То есть, если есть два элемента, первый имеет tabindex="1", а второй tabindex="2", 
то нажатие Tab при фокусе на первом элементе – переведёт его на второй.

Исключением являются специальные значения:
	tabindex="0" делает элемент всегда последним.
	tabindex="-1" означает, что клавиша Tab будет элемент игнорировать.
Любой элемент поддерживает фокусировку, если у него есть tabindex.*/
<ul>
  <li tabindex="1">Один</li>
  <li tabindex="0">Ноль</li>
  <li tabindex="2">Два</li>
  <li tabindex="-1">Минус один</li>
</ul>
<style>  li { cursor: pointer; }
  :focus { outline: 1px dashed green; }
</style>
//Обычно <li> не поддерживает фокусировку, но здесь есть tabindex.


/*Делегирование с focus/blur
focus/blur не всплывают, они могут быть пойманы на фазе перехвата.*/
<form id="form">
  <input type="text" name="name" value="Ваше имя">
  <input type="text" name="surname" value="Ваша фамилия">
</form>
<style>
  .focused {
    outline: 1px solid red;
  }
</style>
<script>
  // ставим обработчики на фазе перехвата, последний аргумент true
  form.addEventListener("focus", function() {
    this.classList.add('focused');
  }, true);
  form.addEventListener("blur", function() {
    this.classList.remove('focused');
  }, true);
</script>

/*Текущий элемент: document.activeElement
Кстати, текущий элемент, на котором фокус, доступен как document.activeElement.*/

/*События focusin/focusout
События focusin/focusout – то же самое, что и focus/blur, только они всплывают.

У них две особенности:
	- Не поддерживаются Firefox (хотя поддерживаются даже старейшими IE), см. https://bugzilla.mozilla.org/show_bug.cgi?id=687787.
	- Должны быть назначены не через on-свойство, а при помощи elem.addEventListener.
Из-за отсутствия подержки Firefox эти события используют редко. Получается, что во всех браузерах можно использовать focus на стадии перехвата, ну а focusin/focusout – в IE8-, где стадии перехвата нет.

Подсветка формы в примере ниже работает во всех браузерах.*/

/*Итого
События focus/blur происходят при получении и снятии фокуса с элемента.

У них есть особенности:
	- Они не всплывают. Но на фазе перехвата их можно перехватить. Это странно, но это так, не спрашивайте почему.

	- Везде, кроме Firefox, поддерживаются всплывающие альтернативы focusin/focusout.

	- По умолчанию многие элементы не могут получить фокус. Например, если вы кликните по DIV, то фокусировка на нем не произойдет.

Но это можно изменить, если поставить элементу атрибут tabIndex. Этот атрибут также дает возможность контролировать порядок перехода при нажатии Tab.*/






































