/*Делегирование событий
Заключается в том, что если у нас есть много элементов, события на которых нужно обрабатывать
похожим образом, то вместо того, чтобы назначать обработчик каждому – мы ставим один обработчик
на их общего предка. Из него можно получить целевой элемент event.target,
понять на каком именно потомке произошло событие и обработать его.*/

/*Применение делегирования: действия в разметке
Обычно делегирование – это средство оптимизации интерфейса. Мы используем один обработчик для схожих действий на однотипных элементах.

Выше мы это делали для обработки кликов на <td>.

Но делегирование позволяет использовать обработчик и для абсолютно разных действий.

Например, нам нужно сделать меню с разными кнопками: «Сохранить», «Загрузить», «Поиск» и т.д. И есть объект с соответствующими методами: save, load, search и т.п…

Первое, что может прийти в голову – это найти каждую кнопку и назначить ей свой обработчик среди методов объекта.

Но более изящно решить задачу можно путем добавления одного обработчика на всё меню, а для каждой кнопки в специальном атрибуте, который мы назовем data-action (можно придумать любое название, но data-* является валидным в HTML5), укажем, что она должна вызывать:*/
<button data-action="save">Нажмите, чтобы Сохранить</button>

/*Итго
Алгоритм:
	Вешаем обработчик на контейнер.
	В обработчике: получаем event.target.
	В обработчике: если event.target или один из его родителей в контейнере (this) – интересующий нас элемент – обработать его.*/





































