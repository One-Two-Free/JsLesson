/*Квантификаторы +, *, ? и {n}

Количество {n}
Количество повторений символа можно указать с помощью числа в фигурных скобках: {n}.
У него есть несколько подформ записи:

Точное количество: {5}
Регэксп \d{5} обозначает ровно 5 цифр, в точности как \d\d\d\d\d.

Количество от-до: {3,5}
Для того, чтобы найти, например, числа размером от трёх до пяти знаков, 
нужно указать границы в фигурных скобках: \d{3,5}
Последнее значение можно и не указывать. Тогда выражение \d{3,} найдет числа, длиной от трех цифр:
*/



/*Короткие обозначения
Для самых часто востребованных квантификаторов есть специальные короткие обозначения.
+
Означает «один или более», то же что {1,}.
Например, \d+ находит числа – последовательности из 1 или более цифр:*/
var str = "+7(903)-123-45-67";
alert( str.match(/\d+/g) ); // 7,903,123,45,67

/*  ?
Означает «ноль или один», то же что и {0,1}. По сути, делает символ необязательным.
Например, регэксп ou?r найдёт o, после которого, возможно, следует u, а затем r.
Этот регэксп найдёт or в слове color и our в colour:*/
var str = "Можно писать color или colour (британский вариант)";
alert( str.match(/colou?r/g) ); // color, colour

/*
*Означает «ноль или более», то же что {0,}. То есть, символ может повторяться много раз или вообще отсутствовать.*/



/*Ещё примеры
Эти квантификаторы принадлежат к числу самых важных «строительных блоков» для сложных регулярных выражений, поэтому мы рассмотрим ещё примеры.
Регэксп «десятичная дробь» (число с точкой внутри): \d+\.\d+
В действии:*/
alert( "0 1 12.345 7890".match(/\d+\.\d+/g) ); // 12.345

//Регэксп «открывающий HTML-тег без атрибутов», такой как <span> или <p>: /<[a-z]+>/i
alert( "<BODY> ... </BODY>".match(/<[a-z]+>/gi) ); // <BODY>

/*Это регулярное выражение ищет символ '<', за которым идут одна или более букв английского алфавита, и затем '>'.

Регэксп «открывающий HTML-тег без атрибутов» (лучше): /<[a-z][a-z0-9]*>/i
Здесь регулярное выражение расширено: в соответствие со стандартом, 
HTML-тег может иметь символ цифры на любой позиции, кроме первой, например <h1>.*/
alert( "<h1>Привет!</h1>".match(/<[a-z][a-z0-9]*>/gi) ); // <h1>

/*Регэксп «открывающий или закрывающий HTML-тег без атрибутов»: /<\/?[a-z][a-z0-9]*>/i
В предыдущий паттерн добавили необязательный слэш /? перед тегом. Его понадобилось заэкранировать, чтобы JavaScript не принял его за конец шаблона.*/
alert( "<h1>Привет!</h1>".match(/<\/?[a-z][a-z0-9]*>/gi) ); // <h1>, </h1>

















